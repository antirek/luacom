<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">
<html><head><title>LuaCOM</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<link rel="StyleSheet" href="common_css.css">
<script type="text/javascript" src="script.js"></script>
<object id=hhctrl classid="clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11" width=0 height=0 vspace=0 hspace=0 border=0 type="application/x-oleobject"></object>
</head>
<body>
<div class="post translation shortcuts_item">
<div class="content html_format">
<a name="5"></a>
<div class="head0"><h1 class="title"><font size=5>Глава 5</font></h1></div>
<h3>Информация о версии</h3>
В данной главе представлены различные сведения характерные для текущей версии LuaCOM. Здесь записаны текущие ограничения LuaCOM, известные его ошибки, история изменений прежних версий, технические подробности и т.д.
<a name="5.1"></a>
<h4>5.1 Ограничения</h4>
Здесь перечислены текущие ограничения LuaCOM, по состоянию на данную версию, и сведения о будущем ослаблении этих ограничений.
<ul><li>LuaCOM в настоящий момент поддерживает выставление COM-объектов только в качестве “одноразовых” объектов. Ограничение можно обойти выставлением одного и того же объекта много раз. Это ограничение может быть удалено по запросу;</li>
<li>LuaCOM не поддерживает методы COM с переменным числом параметров. Ограничение можно обойти передачей дополнительных (необязательных) параметров внутри таблицы, но это не проверялось. Это может быть выполнено по запросу;</li>
<li>LuaCOM не предоставляет доступ к интерфейсам COM которые не наследуют от интерфейса <tt>IDispatch</tt>. То есть, поддерживается только автоматизация объектов.
Это ограничение обусловлено функцией позднего связывания, предоставляемой LuaCOM.
Имеется возможность предоставления доступа к этим COM-интерфейсам через ”посредничество” объекта Automation, который переводит вызовы, сделанные через автоматизацию к вызовам <a class=popupspot href="JavaScript:hhctrl.TextPopup('Таблица виртуальных методов (от англ. virtual method table)\r\n— координирующая таблица или vtable — механизм,\r\nиспользуемый в языках программирования для поддержки\r\nдинамического соответствия (или метода позднего связывания).\r\n Виртуальная таблица (содержит указатели на все методы\r\nинтерфейса некоторого COM-объекта)','Arial,9',10,10,0xffffff,0xd69967)">vtable</a> (раннее связывание).
Также возможно реализовать такого ”посредника” напрямую с помощью API C/C++ LuaCOM, но это не проверялось и не испытывалось.</li></ul>
<a name="5.2"></a>
<h4>5.2 Известные ошибки</h4>
Здесь перечислены известные ошибки в LuaCOM. Если найдете любые другие ошибки, сообщите о них через домашнюю страницу LuaCOM.
<ul><li>LuaCOM реализует только интерфейсы позднего связывания, но допускает QueryInterface для интерфейсов раннего связывания. Такое ошибочное поведение обусловлено способом отправки событий клиента Visual Basic к серверу. Смотрите <a href="#5.4.5">подраздел 5.4.5</a>;</li>
<li>когда таблица объектов (то есть, SAFEARRAY из указателей <tt>IDispatch</tt>) передается в качестве параметра COM-объекту, эти объекты LuaCOM не могут быть удалены автоматически и может произойти утечка;</li>
<li>когда COM-объект, реализованный в Lua, вызывается из VBScript, параметры “in-out” типа SAFEARRAY не могут быть изменены. Если таковые есть, VBScript пожалуется на ошибку COM.</li></ul>
<a name="5.3"></a>
<h4>5.3 Дальнейшие улучшения</h4>
Помимо усовершенствований перечисленных в главах ?? и ??, есть и другие запланированные улучшения:
<ul><li>улучшение общей производительности LuaCOM;</li>
<li>динамическое создание библиотек типов;</li>
<li>улучшение поддержки создания полноценных объектов COM с помощью Lua.</li></ul>
<a name="5.4"></a>
<h4>5.4 Значимые проблемы LuaCOM</h4>
LuaCOM в использовании очень похож на другие языки с поддержкой Automation или среды разработки (Visual Basic<sup>&#174;</sup>, VBA, VBScript&#8482;, pycom и т.д.).
Тем не менее, есть некоторые тонкие различия, которые могут запутать программиста: другой синтаксис, неожиданное поведение и т.д.
Чтобы облегчить задачу пользователю LuaCOM, здесь мы объединили сведения об этих проблемах.
<a name="5.4.1"></a>
<h5>5.4.1 Проблемы создания экземпляра (инстанцирования) объектов COM</h5>
Некоторые COM-объекты могут располагаться во внутрипроцессных серверах (реализованных в DLL'ках) и в локальных серверах (реализованных как отдельные процессы).
COM отдает предпочтение внутрипроцессным серверам, так как они более быстрые.
Тем не менее, некоторые приложения могут не работать с LuaCOM, работающим в качестве внутрипроцессных серверов.
Следует создавать экземпляр COM-объекта предоставляя дополнительный флаг, заставляющий использовать локальные серверы. Смотрите документацию по функции API <tt>CreateObject</tt>.
<a name="5.4.2"></a>
<h5>5.4.2 Реализация COM-объектов из памяти</h5>
В обычной ситуации внепроцессный COM-сервер должен завершить существование когда высвободятся все ссылки на его объекты.
Это может иметь важное значение, так как создание новых экземпляров может зависеть от отсутствия работающего сервера.
LuaCOM объединяет стандартный механизм подсчета ссылок COM со сборщиком мусора Lua.
Это прекрасно работает в большинстве ситуаций, но имеются несколько случаев, в которых требуется более тщательный анализ:
<ul><li>для немедленного завершения серверного процесса, необходимо удалить все ссылки в Lua на COM-объекты, находящиеся в этом процессе, и затем вызвать цикл сборки мусора;</li>
<li>иногда ссылка на COM-объект может быть ошибочно сохранена в глобальной переменной и впоследствии там забыта. Это может помешать завершению серверного процесса, даже при вызове такого метода, как “Quit”.
Чтобы уйти от этой проблемы, можно сгруппировать все ссылки на COM-объект и его вложенные объекты в одной таблице, во избежание “потерянных” ссылок.</li></ul>
Для более подробной информации, смотрите <a href="implement.htm">главу 4</a>.
<a name="5.4.3"></a>
<h5>5.4.3 Получение событий</h5>
Для получения событий и уведомлений от COM-объекта необходимо установить соединение с помощью точек подключения.
Но этого не достаточно: для получения этих уведомлений клиентское приложение должно иметь работающий цикл обработки сообщений. Для более подробной информации, смотрите <a href="elements.htm#3.3.3">главу 3.3.3</a>.
<a name="5.4.4"></a>
<h5>5.4.4 Расширяемые интерфейсы</h5>
Некоторые объекты, имеющие типовые сведения описывающие их интерфейсы (методы, свойства, типы параметров и т.д.), могут дополняться новыми методами и свойствами во время выполнения.
Это означает, что эти методы и свойства могут быть доступны только с тем же самым механизмом LuaCOM, используемым для универсального COM-объекта. Из этого есть несколько выводов:
<ul><li>при обращении к свойствам, обязательно обращаться к ним как к методам и использовать префикс <tt>set</tt> для изменения их значений.
Если объект <tt>foo</tt> имеет свойство <tt>color</tt>, не представленное в типовых сведениях, к нему можно обратиться только через <tt>foo:color()</tt> (доступ чтения) или <tt>foo:setcolor()</tt> (доступ записи);</li>
<li>при вызове методов, все параметры рассматриваются как “in-out”. Это означает, что помимо возвращаемого значения, вызов к методу этого типа будет возвращать назад все параметры, независимо от того, были ли они изменены вызываемым.
В любом случае, можно игнорировать эти значения, просто не назначая их в переменную, например: <tt>x = foo:method(a,b)</tt> будет игнорировать значения <tt>a</tt> и <tt>b</tt>, также возвращенные вызовом.</li></ul>
Такое поведение имеют COM-объекты связанные с WMI. Для более подробной информации, смотрите главу ??.
<a name="5.4.5"></a>
<h5>5.4.5 Проблема Visual Basic<sup>&#174;</sup></h5>
COM-сервер реализованный с помощью LuaCOM можно без проблем использовать в Visual Basic.
<pre><code>Public lc as Object
Set lc = CreateObject("MyCOMObject.InLuaCOM")
lc.showWindow
b = lc.getData(3)
lc.Quit</code></pre>
Но если нужно принимать события, сгенерированные COM-объектом, реализованным с помощью LuaCOM, то необходимо использовать <tt>Public WithEvents</tt> от Visual Basic:
<pre><code>Public WithEvents obj as MyCOMObject.Application
Set obj = CreateObject("MyCOMObject.Application")
Private Sub obj_genericEvent()
  ’ Put your event code here (поместите здесь код события)
End Sub</code></pre>
Здесь имеется проблема: когда VB (т.е. Visual Basic) присваивает результат <tt>CreateObject</tt> переменной <tt>obj</tt>, он пытается получить интерфейс раннего связывания (насколько я знаю, VB использует интерфейсы позднего связывания только с переменными типа <tt>Object</tt>).
LuaCOM не работает с интерфейсами раннего связывания (известного как vtable).
Если вызвать любой метод, использующий переменную <tt>obj</tt>, VB выдаст исключение.<br><br>
Принятое решение состояло в том, чтобы допустить QueryInterface для интерфейса раннего связывания таким образом, разрешается использование <tt>Public WithEvents</tt>). Теперь клиент должен делать “преобразование типа” для правильного использования COM-объекта:
<pre><code>Public WithEvents obj_dummy as MyCOMObject.Application
Public obj as Object
Set obj_dummy = CreateObject("MyCOMObject.Application")
Set obj = obj_dummy</code></pre>
Таким образом клиент может вызывать методы COM-объекта с помощью переменной <tt>obj</tt>.
<a name="5.5"></a>
<h4>5.5 История версий</h4>
<b>Версия 1.4</b>
<ul><li>Официальная поддержка Lua 5.1 (Lua 4.0/5.0 больше не поддерживается).</li>
<li>Makefile обновлен до MSVC++2005. Включены файлы проекта Visual Studio MSVC++2005 и VC6 (.sln/.vcproj + .dsp).</li>
<li>Исправления SafeArray: Исправлена обработка пустых SafeArrays и одномерных SafeArrays; Исправлен обратный порядок индексов в многомерных SafeArray; Добавлен новый демонстрационный пример safearrays.</li>
<li>Исправлена обработка <a class=popupspot href="JavaScript:hhctrl.TextPopup('сокр. от англ. Basic STRing (основная строка) тип, используемый для передачи параметров-структур в COM','Arial,9',10,10,0xffffff,0xd69967)">строк типа BSTR</a> с вложенными нолями. Bug428.</li>
<li>Поддержка HtmlHelp в luacom.ShowHelp. Feature2010.</li>
<li>Переименован файл <tt>luacom-lua5-1.3.dll</tt> в <tt>luacom.dll</tt>.</li>
<li>Другие исправления ошибок, таких как улучшение кода и параметров (Смотрите Tracker на странице проекта LuaForge.)</li></ul>
<b>Версия 1.3</b>
<ul><li>Поддержка нового предложения Lua пакета (смотрите <a href="http://www.keplerproject.org/compat" target=_blank>http://www.keplerproject.org/compat</a>)</li>
<li>Контролы OLE со встроенным UI (интерфейсом);</li>
<li>Представление variants в таблицах;</li>
<li>Конвертирование tag/metamethod для таблиц;</li>
<li>Представление дат в таблицах;</li>
<li>К объекту можно подключать более одного приемника событий;</li>
<li>Метод typelibs, возвращенный GetTypeInfo, экспортирует все перечисления библиотеки типов в таблицу;</li>
<li>Удаление из регистра зарегистрированных серверов (отмена регистрации);</li>
<li>Определяет, когда указатель интерфейса на самом деле является локальной Lua таблицей, реализующей COM-объект;</li>
<li>Исправлена утечка памяти с некоторыми из параметров;</li>
<li>Удален разрыв строки в некоторых системных исключениях.</li></ul>
<b>Версия 1.2</b>
<ul><li>Может быть загружена функция <tt>require</tt> от Lua 5 версии;</li>
<li>Внутрипроцессные серверы полностью реализованы на Lua (код инициализации на C стал не нужен для внутрипроцессных серверов и для локальных серверов использующих Lua 5);</li>
<li>Теперь LuaCOM правильно конвертирует массивы, начинающие с 1;</li>
<li>LuaCOM правильно конвертирует строки UNICODE из/в строки ANSI;</li>
<li>массивы байтов теперь преобразуются в/из строки с включением нолей;</li>
<li>LuaCOM имеет теперь ограниченную поддержку загрузки и просмотра типовых сведений и библиотек типов.
При этом включена возможность импорта констант библиотеки типов (<tt>enum</tt>) как глобальных переменных Lua и возможность открытия справочной информации, связанной с компонентом;</li>
<li>теперь поддерживаются объекты, реализующие интерфейс <tt>IEnumVARIANT</tt>. Это означает, что в LuaCOM могут использоваться коллекции, тем же способом как в VBScript&#8482;;</li>
<li>для упрощения отладки реализован механизм ведения журнала;</li>
<li>Теперь LuaCOM корректно обрабатывает вызовы COM с <a class=popupspot href="JavaScript:hhctrl.TextPopup('Заметьте, что LuaCOM не реализует именованные параметры; он просто принимает их при вызове из COM клиента и размещает их.','Arial,9',10,10,0xffffff,0xd69967)">именованными параметрами</a>. Это вызывало проблемы при получении событий Microsoft Excel<sup>&#174;</sup>;</li>
<li>теперь появилась возможность указать контекст, используемый для создания экземпляра COM-объекта (будет ли он создан как локальный сервер, или как внутрипроцессный сервер);</li>
<li>удален не-ANSI код;</li>
<li>при встрече с указателем <tt>IUnknown</tt>, LuaCOM теперь запрашивает его на принадлежность к <tt>IDispatch</tt> или <tt>IEnumVARIANT</tt> интерфейсам, возвращая объект LuaCOM вместо указателя <tt>IUnknown</tt>;</li>
<li>улучшена обработка ошибок: теперь LuaCOM позволяет настраивать действия, который нужно принять при возникновении ошибок;</li>
<li>LuaCOM теперь поддерживает понятие метода по умолчанию: когда кто-то использует ссылку на объект LuaCOM как функцию, LuaCOM делает вызов функции при помощи метода по умолчанию для этого объекта;</li>
<li>теперь часть LuaAPI в LuaCOM реализована на Lua 5. Это облегчает добавление новых функций и позволяет избежать переполнения библиотеки.
Тем не менее, это не повлияет на тех, кто использует бинарный выпуск, так как они несут предварительно скомпилированный Lua код;</li>
<li><tt>luacom.GetObject</tt> теперь поддерживает использование моникеров (monikers). Среди всего прочего, это делает возможным использование WMI и открывать файлы документов напрямую, например: <tt>luacom.GetObject("myfile.xls")</tt>;</li>
<li><tt>luacom.CreateObject</tt> и <tt>luacom.GetObject</tt> теперь делают попытку инициализации COM-объекта через IPersistStreamInit. Некоторые объекты отказываются работать без этого шага.</li></ul>
<b>Версия 1.1</b>
<ul><li>LuaCOM теперь совместим с Lua 4 и Lua 5. Это просто вопрос выбора соединения с правильной библиотекой;</li>
<li>при использовании Lua 5, LuaCOM использует логические значения для лучшего соответствия типам Automation;</li>
<li>все функции API Lua в LuaCOM теперь сгруппированы вместе в одной таблице по имени <tt>luacom</tt>, хотя в библиотеке версии Lua 4, они все ещё доступны глобально как <tt>luacom_&#60;function&#62;</tt>;</li>
<li>теперь стало возможным создавать экземпляры приложений Microsoft<sup>&#174;</sup> Office<sup>&#174;</sup> (Excel<sup>&#174;</sup>, PowerPoint<sup>&#174;</sup>, и т.д.). Раньше было возможно только их использование через GetObject; теперь можно создавать новый экземпляр этих приложений с помощью <tt>luacom.CreateObject</tt>;</li>
<li>при компиляции с флагом <tt>NDEBUG</tt>, LuaCOM больше не использует вывода на терминал в любом виде (<tt>printf</tt>, <tt>cout</tt> и т.д.). Это может нарушить работу некоторых приложений.</li></ul>
<b>Версия 1.0</b>
<ul><li>изменено обращение к свойству: теперь к параметризованным свойствам нужно обращаться как к функциям, с использованием префикса для различия считывания и записи. Если префикс опущен, предполагается получение (считывание) свойства;</li>
<li>больше не поддерживается синтаксис “<tt>obj.Property(param)</tt>”. Следует использовать двоеточие – “:” – “<tt>obj:Property(param</tt>)”;</li>
<li>улучшена поддержка реализации COM-объектов, включая регистрацию и создание событий;</li>
<li>переписан движок преобразования типов. Теперь он более жестко придерживается типам, указанным в библиотеках типов;</li>
<li>переписана привязка для лучшей поддержки параметров “out” и “in-out”, а также ещё более строгого соблюдения рекомендованных правил распределения памяти для COM;</li>
<li>теперь поддерживаются COM-объекты без типовых сведений.</li></ul>
<b>Версия 0.9.2</b>
<ul><li>удалены константы <tt>LUACOM TRUE</tt> и <tt>LUACOM FALSE</tt>; теперь логические переменные следуют таким же соглашениям как в языке C;</li>
<li>исправлены утечки в памяти и интерфейсе;</li>
<li>некоторые функции API имеют немного различающиеся имена;</li>
<li>изменения в политике распределения памяти, чтобы более строго следовать практике, рекомендованной в COM документации;</li>
<li>изменена политика передачи параметров;</li>
<li>добавлена ограниченная поддержка указателей <tt>IUnknown</tt>;</li>
<li>изменения в преобразовании типа;</li>
<li>добавлена ограниченная поддержка для внедрения и регистрации объектов COM в Lua</li></ul>
<b>Версия 0.9.1</b>
<ul><li>переход на Lua 4;
<li>улучшение обработки различных видов типовых сведений (например, теперь можно получить доступ к объекту Microsoft Internet Explorer<sup>&#174;</sup>);</li>
<li>исключения и ошибки теперь обрабатываются более корректно;</li>
<li>добавлена поддержка для дополнительных (необязательных) параметров со значениями по умолчанию;</li>
<li>LuaCOM больше не делает инициализацию библиотек COM; это остается на усмотрение пользователя;</li>
<li>более строгое поведение у синтаксиса вызовов метода и доступа к свойствам (методы с “:”, свойства с “.”).</li></ul><br><br>
<hr width=90%>
<div align=center style="margin-left:5%; margin-right:5%;">LuaCOM был разработан Renato Cerqueira, Vinicius Almendra и Fabio Mascarenhas.<br>
Проект финансируется компанией TeCGraf<br>(Technology Group on Computer Graphics).
</div></div></div>
<br><br>
</body>
</html>